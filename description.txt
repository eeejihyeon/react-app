React는 유저에게 보여질 내용을 컨트롤할 수 있다.

//// React JS & JavaScript 차이점 ////
// 입력 방식 //
- JavaScript: HTML을 만들고 JavaScript에 가져와서 HTML을 업데이트 하는 방식
- React: JavaScript에서 시작(element 생성...)해서 React JS가 그걸 HTML로 번역하는 방식

// 내용 변경(업데이트) 동작 시 //
~ Total clicks: 0 에서 클릭 시 숫자만 바뀐다면 ~
- JavaScript: <body>-<div>-<span> 모두 업데이트
- React: "0" 부분만 업데이트 (바뀌는 부분만 업데이트)

//// React JS 규칙 ////
1. HTML을 이 페이지에 직접 작성하지 않는다. (JavaScript 코드를 이용해 만든다.)
2. JS: eventlistener = React JS: onEvent

//// JSX 규칙 ////
1. 컴포넌트의 첫 글자는 반드시 대문자여야 한다. 
   ( const Name을 첫 글자가 소문자인 button이라고 한다면 <button />이라고 입력했을 때 HTML <button> 태그라고 생각한다. )
2. HTML에서는 <label>과 <input>을 연결하기 위해 <label for="same">와 <input id="same">를 사용하지만
   JSX에서는 for과 class 같이 JavaScript에서 선점한 문법 용어 사용할 수 없다.
   ( script tag에서 불러온 파일이 production.min라면 에러가 없지만, develropment라면 에러가 뜬다. )
   JSX에서 사용하려면 for === htmlFor, class === className



// arrow function 사용 시 variable 넣기 //
- 중괄호를 넣어준다
- const App = () => {
    const data = React.useState();
    return (
      component
    )
  }


//// state ////

① let counter = 0;
function countUp() {
  // code
}

===

② const data = React.useState(0);

- console.log(data);를 해보면 console에 (2) [0,f]배열이 뜨는데,
  0은 let counter = 0;, f는 function countUp() { /code }와 같다



const Container = () => {
  const [counter, setCounter] = React.useState(0);
  const onClick = () => {
    setCounter(counter + 1);
  };
  return (
    <div>
      <h3>Tatal clicks: {counter}</h3>
      <button onClick={onClick}>Click me</button>
    </div>
  );
};

- modifier 함수를 사용해 state를 변경할 때 컴포넌트 자체가 재생성 된다. 
  ( 새로운 값을 가지고 리렌더링 되기 때문에 counter 값이 계속 +1로 늘어나는 것을 UI로 확인할 수 있다. )

/// state 세팅 방법 ///

직접 값 설정
① setCounter(counter + 1); OR setCounter(1); ...

===

함수로 전달
② setCounter((current) => current + 1);

// modifier 안에는 함수를 넣을 수 있다. 
- ②의 첫번째 argument는 현재값(counter), return 값이 새로운 state(counter + 1)이 된다.
- 함수를 사용하게 되면 리액트가 current가 확실히 현재 값이라는 걸 보장하면서 ①보다 정확하고 안전하다.
- 현재 state를 기반으로 계산을 하고 싶다면, 함수를 이용(다음 state 값이 현재 값을 바탕으로 나올 수 있도록)
- ②는 예상치 못한 업데이트가 어디선가 일어났다고 해도, 혼동을 주는 걸 방지 (안전) 


//// props ////

- <Component text="a" />의 properties(props)를 
function Component(props) {~~~}의 argument(props)의 object 안으로 넣는다.
- props는 첫 번째 유일한 인자이며 Component가 받는 유일한 인자

- props는 오브젝트이기 때문에 {}를 열어 <Component text="a" />의 text를 넣어
function Component(props) {~~~}에서 (props)를 쓰는 대신 shortcut(지름길)으로
function Component({text}) {~~~}로 코드 작성하면 데이터가 나오는 부분인 {props.text}를 {text}로 바로 사용할 수 있다.
=> props object 안에 text가 있다는 걸 알기 때문에 꺼내서 쓰기 가능

// Custom Component
<Component onClick={value} />의 onClick={value}는 props일 뿐이여서 이벤트 실행X
function Component(props) {~~~}에 onClick으로 등록(?)을 해줘야 실행


//// memo ////
- 변경되지 않는 데이터를 기억했다가 변경되는 데이터만 리렌더링

function Component({text, change}) {~~~}

const MemoBtn = React.memo(Component);

<Component text={value} change={changeValue} />
<Component text="1" />
<Component text="2" />
<Component text="3" />
<Component text="4" />
...

- 어떤 state든 하나라도 변경이 된다면 그 state를 담고 있는 component는 리렌더링 된다.
- application이 느려지는 원인이 될 수 있기 때문에 변경되는 부분만 리렌더링 하려면 memo를 쓴다.
- const MemoBtn = React.memo(Component); 
  <Component />를 <MemoBtn />로 수정하면 변경되는 첫번째 줄만 리렌더링

