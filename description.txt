React는 유저에게 보여질 내용을 컨트롤할 수 있다.

//// React JS & JavaScript 차이점 ////
// 입력 방식 //
- JavaScript: HTML을 만들고 JavaScript에 가져와서 HTML을 업데이트 하는 방식
- React: JavaScript에서 시작(element 생성...)해서 React JS가 그걸 HTML로 번역하는 방식

// 내용 변경(업데이트) 동작 시 //
~ Total clicks: 0 에서 클릭 시 숫자만 바뀐다면 ~
- JavaScript: <body>-<div>-<span> 모두 업데이트
- React: "0" 부분만 업데이트 (바뀌는 부분만 업데이트)

//// React JS 규칙 ////
1. HTML을 이 페이지에 직접 작성하지 않는다. (JavaScript 코드를 이용해 만든다.)
2. JS: eventlistener = React JS: onEvent

//// JSX 규칙 ////
1. 컴포넌트의 첫 글자는 반드시 대문자여야 한다. 
(const Name을 첫 글자가 소문자인 button이라고 한다면 <button />이라고 입력했을 때 HTML <button> 태그라고 생각한다.)



// arrow function 사용 시 variable 넣기 //
- 중괄호를 넣어준다
- const App = () => {
    const data = React.useState();
    return (
      component
    )
  }


//// state ////

① let counter = 0;
function countUp() {
  // code
}

===

② const data = React.useState(0);

// console.log(data);를 해보면 console에 (2) [0,f]배열이 뜨는데,
0은 let counter = 0;, f는 function countUp() { /code }와 같다



const Container = () => {
  const [counter, setCounter] = React.useState(0);
  const onClick = () => {
    setCounter(counter + 1);
  };
  return (
    <div>
      <h3>Tatal clicks: {counter}</h3>
      <button onClick={onClick}>Click me</button>
    </div>
  );
};

// modifier 함수를 사용해 state를 변경할 때 컴포넌트 자체가 재생성 된다. 
   (새로운 값을 가지고 리렌더링 되기 때문에 counter 값이 계속 +1로 늘어나는 것을 UI로 확인할 수 있다.)



① setCounter(counter + 1);

===

② setCounter((current) => current + 1);

// modifier 안에는 함수를 넣을 수 있다. 
// ②의 첫번째 argument는 현재값(counter), return 값이 새로운 state(counter + 1)이 되면서 안전한 코드
